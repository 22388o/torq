-- First remove the old version (in case of change in signature)
drop function agg_forwards_by_pub_key(start_time timestamp, end_time timestamp, pub_keys text[]);

-- Create new function
CREATE OR REPLACE FUNCTION agg_forwards_by_pub_key(
    start_time timestamp,
    end_time timestamp,
    pub_keys text[]
)
RETURNS TABLE(
pub_key text,
chan_ids numeric[],
alias text,
amount_in numeric,
fee_in numeric,
count_in numeric,
amount_out numeric,
fee_out numeric,
count_out numeric) AS $$
-- Full forwarding table aggregated per peer
select coalesce(i.pub_key, o.pub_key) as pub_key,
       coalesce(i.chan_ids, o.chan_ids) as chan_ids,
       coalesce(i.alias, o.alias, '') as alias,
       coalesce(amount_in, 0) as amount_in,
       coalesce(fee_in, 0) as fee_in,
       coalesce(count_in, 0) as count_in,
       coalesce(amount_out, 0) as amount_out,
       coalesce(fee_out, 0) as fee_out,
       coalesce(count_out, 0) as count_out
from (
    -- Get inbound forwards aggregated per peer
    select array_agg(distinct incoming_channel_id) as chan_ids,
           ne.alias,
           floor(sum(incoming_amount_msat/1000)) as amount_in,
           floor(sum(fee_msat/1000)) as fee_in,
           count(time_ns) as count_in,
           ce.pub_key as pub_key
    from forward fw
    left join channel_event ce on fw.incoming_channel_id = ce.chan_id
    left join (select distinct pub_key, alias from node_event) ne on ce.pub_key = ne.pub_key
    where
          -- Filter on public keys
          (($3::text[] is null) or (ce.pub_key = ANY($3))) and
          -- From time
          (($1::timestamp is null) or fw.time >= $1::timestamp) and
          -- To time
          (($2::timestamp is null) or fw.time <= $2::timestamp)
    group by  ce.pub_key, ne.alias) as i
full outer join (
    -- Get outbound forwards aggregated per peer
    select array_agg(distinct outgoing_channel_id) as chan_ids,
           ne.alias,
           floor(sum(outgoing_amount_msat/1000)) as amount_out,
           floor(sum(fee_msat/1000)) as fee_out,
           count(time_ns) as count_out,
           ce.pub_key as pub_key
    from forward fw
    left join channel_event ce on fw.outgoing_channel_id = ce.chan_id
    left join (select distinct pub_key, alias from node_event) ne on ce.pub_key = ne.pub_key
    where
          -- Filter on public keys
          (($3::text[] is null) or (ce.pub_key = ANY($3))) and
          -- From time
          (($1::timestamp is null) or fw.time >= $1::timestamp) and
          -- To time
          (($2::timestamp is null) or fw.time <= $2::timestamp)
    group by  ce.pub_key, ne.alias
) as o on i.pub_key = o.pub_key
$$ LANGUAGE SQL;